********************************SET-UP********************************
sudo apt update
sudo apt install openjdk-17-jdk -y
sudo apt install openjdk-17-jdk -y
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 -> SET JAVA HOME

wget https://archive.apache.org/dist/spark/spark-3.3.2/spark-3.3.2-bin-hadoop3.tgz
tar -xvzf spark-3.5.5-bin-hadoop3.tgz

sudo apt update
sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev \
    libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev

wget https://www.python.org/ftp/python/3.9.1/Python-3.9.1.tgz
tar -xf Python-3.9.1.tgz
cd Python-3.9.1
./configure --enable-optimizations
make -j $(nproc)
sudo make altinstall
python3.9 --version

source venv/bin/activate

***Uploaded searchlog.csv to spark_project folder where python file is also located


********************************QUERY FILE********************************


from flask import Flask, request, jsonify
import glob
import json
import os
from collections import OrderedDict, defaultdict

app = Flask(__name__)
app.config["JSON_SORT_KEYS"] = False


# Domain priority: .org > .edu > .com
def Sdomain_priority(url):
    if url.endswith('.org'):
        return 0
    elif url.endswith('.edu'):
        return 1
    elif url.endswith('.com'):
        return 2
    else:
        return 3

import tldextract

def domain_priority(url):
    ext = tldextract.extract(url)
    tld = ext.suffix
    if tld == 'org':
        return 0
    elif tld == 'edu':
        return 1
    elif tld == 'com':
        return 2
    else:
        return 3

# Load all processed_data/*.json files into a list of records
def load_data():
    data = []
    for filename in glob.glob('processed_data/part-*.json'):
        with open(filename, 'r') as f:
            for line in f:
                data.append(json.loads(line))
    return data

# Optionally, cache the data for efficiency
DATA = load_data()

@app.route('/results', methods=['POST'])
def results():
    req = request.get_json()
    term = req.get('term')
    if not term:
        return jsonify({"error": "Missing 'term' in request"}), 400

    # Aggregate clicks per URL for the search term
    url_clicks = {}
    for record in DATA:
        if record['term'] == term:
            url = record['url']
            clicks = int(record['clicks'])
            url_clicks[url] = url_clicks.get(url, 0) + clicks

    # Sort: first by clicks desc, then by domain priority
    sorted_items = sorted(
        url_clicks.items(),
        key=lambda x: (-x[1], domain_priority(x[0]))
    )

    # Build output dictionary
    results = {url: clicks for url, clicks in sorted_items}
    results_final = OrderedDict(sorted_items)
   
    #return jsonify({"results": results_final})
    return app.response_class(
        response=json.dumps({"results": results_final}),
        status=200,
        mimetype='application/json'
    )


@app.route('/trends', methods=['POST'])
def trends():
    req = request.get_json()
    term = req.get('term')
    if not term:
        return jsonify({"error": "Missing 'term' in request"}), 400

    total_clicks = sum(int(record['clicks']) for record in DATA if record['term'] == term)

    return jsonify({"clicks": total_clicks})

@app.route('/popularity', methods=['POST'])
def popularity():
    req = request.get_json()
    url = req.get('url')
    if not url:
        return jsonify({"error": "Missing 'url' in request"}), 400

    total_clicks = sum(int(record['clicks']) for record in DATA if record['url'] == url)

    return jsonify({"clicks": total_clicks})


@app.route('/getBestTerms', methods=['POST'])
def get_best_terms():
    req = request.get_json()
    website = req.get('website')
    if not website:
        return jsonify({"error": "Missing 'website' in request"}), 400

    # Step 1: Aggregate clicks per term for the given website
    term_clicks = defaultdict(int)
    total_clicks = 0

    for record in DATA:
        if record['url'] == website:
            clicks = int(record['clicks'])
            term_clicks[record['term']] += clicks
            total_clicks += clicks

    if total_clicks == 0:
        return jsonify({"best_terms": []})

    # Step 2: Return terms with > 5% of total clicks
    best_terms = [term for term, clicks in term_clicks.items() if clicks / total_clicks > 0.05]

    return jsonify({"best_terms": best_terms})


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)

